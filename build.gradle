plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

def buildSuffix = System.getenv('BUILD_NUMBER') ? "-b${System.getenv('BUILD_NUMBER')}" : ""

version = "$mod_version+mc${game_version}${buildSuffix}"
group = "de.ellpeck.actuallyadditions"
base {
    archivesName = "ActuallyAdditions-$game_version"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${game_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
	        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.

            mods {
                actuallyadditions {
                    source sourceSets.main
                }
            }
	        property 'forge.enabledGameTestNamespaces', "actuallyadditions"

        }
	    client2 {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--username', 'Dev2'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.

            mods {
                actuallyadditions {
                    source sourceSets.main
                }
            }
            property 'forge.enabledGameTestNamespaces', "actuallyadditions"
	    }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                actuallyadditions {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', 'actuallyadditions', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                actuallyadditions {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://maven.blamejared.com"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${game_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${game_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${game_version}-forge-api:${jei_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${game_version}-forge:${jei_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compileOnly fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}")
    runtimeOnly fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}")

    runtimeOnly fg.deobf("curse.maven:jade-324717:5390389")
    runtimeOnly fg.deobf("curse.maven:mekanism-268560:5125665")
}

jar {
    group = 'artifact'
    manifest {
        attributes(["Specification-Title"     : "Actually Additions",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.archivesBaseName,
                    "Implementation-Version"  : project.version,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }

    from sourceSets.main.output
}

processResources {
    inputs.property('version', project.version)
    inputs.property('forge_version_range', project.forge_version_range)
    inputs.property('minecraft_version_range', project.minecraft_version_range)

    filesMatching(['META-INF/mods.toml'])  {
        expand 'version': project.version, 'forge_version_range': project.forge_version_range, 'minecraft_version_range': project.minecraft_version_range
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    archiveClassifier.set('dev')
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    archiveClassifier.set('api')
    include 'de/ellpeck/actuallyadditions/api/**'
}

javadoc {
    include 'de/ellpeck/actuallyadditions/api/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    archiveClassifier.set('sources')
}

artifacts {
    archives deobfJar, sourcesJar, apiJar, javadocJar
}

publishing {
    tasks.publish.dependsOn build
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = base.archivesName.get()
            version = version

            from components.java

            artifact deobfJar
            artifact sourcesJar
            artifact apiJar
            artifact javadocJar

            pom.withXml {
                def node = asNode()
                if (node.dependencies.size() > 0)
                    node.remove(node.dependencies)
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
